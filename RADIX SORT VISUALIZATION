#include<iostream>
#include "GL/freeglut.h"
#include "GL/gl.h" 
#include<windows.h> 
using namespace std;

int length = 120;
int* arr = (int*)malloc(sizeof(int) * length);
int* output = (int*)malloc(sizeof(int) * length);
 

void renderFunction(int* a)
{

    glClearColor(0.0, 0.0, 0.0, 0.0);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 1.0, 1.0);
    glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0);

    float l = (float)length;
    float widthAdder = 1 / l;

    for (int i = 0; i < length; ++i)
    {
        //cout << arr[i] << " ";
        glBegin(GL_POLYGON);

        // + 1 so value of 0 has height of 1
        float arrayIndexHeightRatio = 2 * (a[i] + 1) / l;
        float widthIndexAdder = 2 * i / l;

        float leftX = -1 + widthIndexAdder;
        float rightX = leftX + widthAdder;
        float bottomY = -1;
        float topY = bottomY + arrayIndexHeightRatio;

        // bottom left
        glColor4f(1, 0, 0, 0);
        glVertex2f(leftX, bottomY);

        // bottom right
        glColor4f(0, 1, 0, 0);
        glVertex2f(rightX, bottomY);

        // top right
        glColor4f(0, 0, 1, 0);
        glVertex2f(rightX, topY);

        // top left
        glColor4f(0, 0, 0, 1);
        glVertex2f(leftX, topY);

        glEnd();
    }

    glFlush();
}


int getMax(int arr[], int n)
{
    int mx = arr[0];
    for (int i = 1; i < n; i++)
        if (arr[i] > mx)
            mx = arr[i];
    return mx;
}

void countSort(int arr[], int n, int exp)
{

    int i, count[10] = { 0 };


    for (i = 0; i < n; i++)
        count[(arr[i] / exp) % 10]++;


    for (i = 1; i < 10; i++)
        count[i] += count[i - 1];


    for (i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        renderFunction(output);
        //Sleep(50);

        count[(arr[i] / exp) % 10]--;
    }


    for (i = 0; i < n; i++) {
        arr[i] = output[i];
        output[i] = 0;
        //renderFunction();
        //Sleep(100);
    }
}

void radixsort()
{

    int m = getMax(arr, length);


    for (int exp = 1; m / exp > 0; exp *= 10)
        countSort(arr, length, exp);
}

/* Main method - main entry point of application
the freeglut library does the window creation work for us,
regardless of the platform. */
int main(int argc, char** argv)
{
    int a;
    cout << "-----------------------------------------------------------------------------------------" << endl;
    cout << endl;
    cout << "                       Welcome to radix sort visualization                            " << endl;
    cout << endl; 
    cout << "                                       VVCE                                           " << endl;
    cout << endl;
    cout << "          ABHISHEK YS                 HRUTHIK BM         " << endl;
    cout << endl;
    cout << "-----------------------------------------------------------------------------------------" << endl;
    cout << endl;

    cout << ("      How do you like to sort the numbers. 0 for random and 1 for user input: \n====> ");
    cin >> a;
    

    if (a == 0)
    {
       cout << "\n====> input array: \n[ ";

        for (int i = 0; i < length; i++) {
            arr[i] = rand() % 120;
            cout << arr[i] << " ";
        }
        cout << "]" << endl;
    }

    else
    {
        cout << ("Enter the size of array");
        cin >> length;
        for (int i = 0; i < length; i++)
        {
            cin >> arr[i];

        }
    }

    cout << endl;

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(1000, 1000);
    glutInitWindowPosition(0,0);
    glutCreateWindow("OpenGL - First window demo");
    
    renderFunction(arr);
    Sleep(1000);
    
    radixsort();
    cout << "\n====> after sorting: \n[ ";
    for (int i = 0; i < length; i++) cout << arr[i] << " ";
    cout << " ]";
    glutMainLoop();
    

    return 0;
}
